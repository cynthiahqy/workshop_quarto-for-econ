{
  "hash": "90e9d8a8ca678bce028d2f7394533e2e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hello Quarto\"\nsubtitle: \"Session 1: Getting to know Quarto\"\n# date: 2023-07-18\nformat: revealjs\nmetadata-files: \n  - ../_slides.yml\n---\n\n\n\n\n# Welcome\n\n## About Me - Cynthia Huang\n\n::: {layout-ncol=\"2\"}\n![](images/Cynthia_Huang.jpg)\n\n-   **Currently:** PhD candidate in EBS\n-   **Previously:** Economics at Unimelb, SoDa Labs\n-   Passionate about research workflows, communication and transparency\n:::\n\n## About the Tools\n\n-   [Quarto](https://quarto.org) for collating scientific and technical research inputs into polished documents\n-   [VSCode](https://code.visualstudio.com) for editing and rendering Quarto documents and websites\n-   [git](https://git-scm.com) and [GitHub](https://github.com) for publishing your Quarto website\n-   (optional) [RStudio](https://posit.co/products/open-source/rstudio/)\n-   (optional) R, python, or Julia\n\n## Workshop Goals {.small}\n\n::: notes\nThis workshop will be a little bit different to your standard Intro to Quarto workshop. We will not cover computation in Quarto\n:::\n\nWe will focus on:\n\n-   features of Quarto that can help you document research code and data:\n    -   incorporate existing text files (scripts, table outputs etc.) <!-- includes -->\n    -   reference management -- e.g. in-line citations, cross-references, figure and table numbers <!--- citations -->\n    -   generate summary tables and overviews from listing files <!--- listings --->\n-   how to publish and share Quarto projects online\n\nWe will not dive into:\n\n- computation in Quarto (i.e. R, Python, Julia or Observable)\n\n## Workshop Expectations {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n::: {.fragment .fade-in-then-semi-out}\nI'll **assume** you\n\n-   work with small-medium data\n\n-   regularly write and debug code\n\n-   know some basic LaTex and have heard of markdown\n\n-   can use and edit a template even if you don't fully understand what it is doing\n:::\n:::\n\n::: {.column width=\"50%\"}\n::: {.fragment .fade-in}\nI'll **teach** you\n\n-   Quarto syntax and formats\n\n-   requirements for an AEA replication package\n\n-   how to publish Quarto documents and websites\n:::\n:::\n:::\n\n## Getting to Know You\n\nTell me your:\n\n- Name\n- Research Area\n- Coding Languages:\n  - R, Python\n  - STATA\n- Typesetting tools:\n  - Microsoft Office\n  - Markdown\n  - LaTex\n\n# What is Quarto?\n\n## Quarto ...\n\n-   is a new, open-source, scientific, and technical publishing system built on [Pandoc](https://pandoc.org/)\n\n![Artwork from \"Hello, Quarto\" keynote by Julia Lowndes and Mine Ã‡etinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst.](images/horst_quarto_schematic.png){fig-alt=\"A schematic representing the multi-language input (e.g. Python, R, Observable, Julia) and multi-format output (e.g. PDF, html, Word documents, and more) versatility of Quarto.\" fig-align=\"center\"}\n\n## Quarto ...\n\n-   is a new, open-source, scientific, and technical publishing system built on [Pandoc](https://pandoc.org/)\n\n::: incremental\n-   includes a [visual markdown editor](https://quarto.org/docs/visual-editor/) for WYSISYG editing\n-   is a command line interface (CLI) that the renders plain text formats (`.qmd`, `.rmd`, `.md`) into static PDF/Word/HTML reports, books, websites, presentations and more.\n:::\n\n## Aside: Alternative Workspaces\n\n::: r-stack\n![](https://quarto.org/docs/tools/images/rstudio-preview.png){.fragment fig-alt=\"A screenshot of a Quarto document rendered inside RStudio\" width=\"1200\"}\n\n![](https://quarto.org/docs/tools/images/jupyterlab-preview.png){.fragment fig-alt=\"A screenshot of a Quarto document rendered inside JupyterLab\" width=\"1200\"}\n\n![](https://quarto.org/docs/computations/images/python-vscode.png){.fragment fig-alt=\"A screenshot of a Quarto document rendered inside VSCode\" width=\"1200\"}\n:::\n\n## My Turn: A Tour of Quarto in VSCode\n\n<!--- TODO: MY TURN --->\n\n::: notes\nShow off features: \n\n- this website and slides\n- article\n- wiki template\n:::\n\n## Follow Along: my_first_doc.qmd {.smaller}\n\n::: notes\nwe won't go in-depth with markdown features, but explore and ask questions!\n\n- new project from day01-exercises\n- new file in Rstudio\n- remove CODE chunks & focus on Markdown Features\n- use Help \\> Markdown Quick Reference\n- visual mode \\<--\\> source mode\n- formats - HTML, PDF, docx, pptx\n- render options\n- preview in pane, or window\n- render on save\n- show terminal: quarto command line interface - `quarto render my_first_doc.qmd` - `quarto preview my_first_doc.qmd`\n\n:::\n\n::: task\n-   Create and Open a new folder in VSCode\n-   Use the command palette to create a new document in **Visual** mode.\n-   Replace the Code section with your own content.\n-   Render the document then switch to **Source** mode. Save the file as `my_first_doc.qmd`\n-   Re-render and compare changes with your neighbours.\n-   Take note of any features you would like to know more about.\n:::\n\n## Rendering Options in VSCode\n\n1. **Option 1:** Press the Render button\n\n. . .\n\n2. **Option 2:** In the Terminal via `quarto render`:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nquarto render document.qmd # defaults to html\nquarto render document.qmd --to pdf\nquarto render document.qmd --to docx\n```\n:::\n\n\n## Under the Hood {.smaller}\n\n![](images/rstudio-qmd-how-it-works.png)\n\n::: incremental\n-   The `quarto` package calls the Quarto command line interface (CLI) -- `quarto render my_doc.qmd`\n-   any R/Python/Julia code or features are evaluated by `knitr` or `jupyter` which return a `.md` file along with the evaluated code\n-   Quarto applies [Lua](https://quarto.org/docs/extensions/lua.html) filters + CSS/LaTeX which is then evaluated alongside the `.md` file by Pandoc and converted to a final output format\n:::",
    "supporting": [
      "slides_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}